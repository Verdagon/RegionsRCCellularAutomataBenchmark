// This is a basic cellular automata program, which generates a little level for a roguelike game.

// TODO: Catch up the rest of the builtins and stdlib
import v.builtins.arith.*;
import v.builtins.str.*;
import v.builtins.logic.*;
import v.builtins.print.*;
import v.builtins.runtime_sized_array_mut_new.*;
import v.builtins.runtime_sized_array_push.*;
import v.builtins.runtime_sized_array_pop.*;
import v.builtins.runtime_sized_array_len.*;

// TODO: Catch up logic.vale
func !=<T>(a &T, b &T) bool
where func ==(&T, &T)bool {
  return not (a == b);
}

struct Rand {
  seed! i64;
}
func NextRand(rand &Rand) i64 {
  x = rand.seed;
  set x = x + (x / 200096i64);
  set x = x - (x * 33554432i64);
  set x = x + (x / 134217728i64);
  set rand.seed = x;
  return x * 2685821657736338717i64;
}

func min(a int, b int) int {
  return if (a <= b) { a } else { b };
}

func max(a int, b int) int {
  return if (a >= b) { a } else { b };
}


func MakeBoard(rand &Rand) [][]bool {
  rows = [][]bool(1000);
  row_i = 0;
  while row_i < 1000 {
    row = []bool(4000);
    col_i = 0;
    while col_i < 4000 {
      rand_int = rand.NextRand();
      rand_bool = (rand_int mod 2i64) == 0i64;
      // Implicit & causes a gen check in push. Inlining will fix.
      row.push(rand_bool);
      set col_i = col_i + 1;
    }
    rows.push(row); // Same here.
    set row_i = row_i + 1;
  }
  return rows;
}

pure func CellularAutomata<r' imm>(old_map &r'[][]bool) [][]bool {
  new_map = [][]bool(1000);
  /// foreach row_i in 0..1000 {
  row_i = 0;
  while row_i < 1000 {
    new_row = []bool(4000);
    /// foreach col_i in 0..4000 {
    col_i = 0;
    while col_i < 4000 {
      num_walkable_neighbors = 0;
      /// foreach neighbor_row_i in max(0, row_i - 1)..min(1000 - 1, row_i + 1) {
      neighbor_row_i = max(0, row_i - 1);
      while neighbor_row_i <= min(1000 - 1, row_i + 1) {
        /// foreach neighbor_col_i in max(0, col_i - 1)..min(4000 - 1, col_i + 1) {
        neighbor_col_i = max(0, col_i - 1);
        while neighbor_col_i <= min(4000 - 1, col_i + 1) {
          if row_i != neighbor_row_i or col_i != neighbor_col_i {
            if old_map[neighbor_row_i][neighbor_col_i] {
              set num_walkable_neighbors = num_walkable_neighbors + 1;
            }
          }
          set neighbor_col_i = neighbor_col_i + 1;
        }
        set neighbor_row_i = neighbor_row_i + 1;
      }
      new_walkable =
        if num_walkable_neighbors < 4 {
          false
        } else if num_walkable_neighbors > 4 {
          true
        } else {
          // TODO: Automatically transmigrate primitives between regions
          if old_map[row_i][col_i] { true } else { false }
        };
      new_row.push(new_walkable);
      set col_i = col_i + 1;
    }
    new_map.push(new_row);
    set row_i = row_i + 1;
  }
  return new_map;
}

pure func Display<r' imm>(map &r'[][]bool) {
  /// foreach row in map {
  row_i = 0;
  while row_i < 1000 {
    /// foreach cell in row {
    col_i = 0;
    while col_i < 4000 {
      if map[row_i][col_i] {
        print("#");
      } else {
        print(".");
      }
      set col_i = col_i + 1;
    }
    print("\n");
    set row_i = row_i + 1;
  }
}

exported func main() int {
  random_seed = 1337i64;
  rand = Rand(random_seed);
  // TODO: Re-enable string comparison
  // For now, we'll just say that if there's any argument at all, the user wants to display the board.
  display_board = numMainArgs() > 1;
  
  board_0 = MakeBoard(&rand);

  board_1 = CellularAutomata(&board_0);
  // TODO: re-enable array drops
  while board_0.len() > 0 {
    row = board_0.pop();
    while row.len() > 0 {
      row.pop();
    }
    [] = row;
  }
  [] = board_0;

  board_2 = CellularAutomata(&board_1);
  // TODO: re-enable array drops
  while board_1.len() > 0 {
    row = board_1.pop();
    while row.len() > 0 {
      row.pop();
    }
    [] = row;
  }
  [] = board_1;

  if display_board {
    Display(&board_2);
  }
  // TODO: re-enable array drops
  while board_2.len() > 0 {
    row = board_2.pop();
    while row.len() > 0 {
      row.pop();
    }
    [] = row;
  }
  [] = board_2;

  return 0;
}
